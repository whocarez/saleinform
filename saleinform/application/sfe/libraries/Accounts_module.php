<?phpif (!defined('BASEPATH')) exit('No direct script access allowed');/* * Accounts module * Mazvv 03-05-2007*/class Accounts_module{	private $ciObject;	private $objectsArr = array();
	public function __construct(){		$this->ciObject = &get_instance();		$this->ciObject->lang->load('accounts_module');		$this->ciObject->load->model('accounts_model');	}
	public function loginProcessing(){		$this->ciObject->form_validation->set_rules('login', lang('ACCOUNTS_MODULE_LOGIN_LABEL'), 'required|trim|callback_checkLogin');		$this->ciObject->form_validation->set_rules('password', lang('ACCOUNTS_MODULE_PASSWORD_LABEL'), 'trim');		if ($this->ciObject->form_validation->run() == FALSE){			if($this->ciObject->input->post('referrer')) $this->objectsArr['refferer'] = $this->ciObject->input->post('referrer');			else $this->objectsArr['refferer'] = $this->ciObject->agent->referrer();			return $this->ciObject->load->view('modules/accounts_module/login_form.php',$this->objectsArr, True);			}		$currentSESS = $this->ciObject->session->userdata('_SI_');		unset($currentSESS['SI_LOGIN']);		$result = $this->ciObject->accounts_model->GetUserInfo($this->ciObject->input->post('login'), $this->ciObject->input->post('password'));		$currentSESS['SI_LOGIN']['_USER_RID_'] = $result['rid'];		$currentSESS['SI_LOGIN']['_USER_LOGIN_'] = $result['login'];		$this->ciObject->session->set_userdata('_SI_', $currentSESS);		#redirect($this->ciObject->input->post('referrer'), 'refresh');		#TODO: redirect into refferer page		redirect('', 'refresh');	}
	public function checkLogin($login){		$result = $this->ciObject->accounts_model->GetUserInfo($login, $this->ciObject->input->post('password'));		if(!$result){			$this->ciObject->form_validation->set_message('checkLogin', lang('ACCOUNTS_LOGIN_ERROR'));			return False;		}			return True;	}
	public function isLogged(){		$currentSESS = $this->ciObject->session->userdata('_SI_');		if($currentSESS){			if($loggedInfo = element('SI_LOGIN', $currentSESS)) return $loggedInfo;			}		return False;	}
		public function logout(){		$currentSESS = $this->ciObject->session->userdata('_SI_');		if(isset($currentSESS['SI_LOGIN'])){ 			unset($currentSESS['SI_LOGIN']);			$this->ciObject->session->set_userdata('_SI_', $currentSESS);		}		return;	}
		public function registerProcessing(){		$data = array();		$this->ciObject->form_validation->set_rules('login', lang('ACCOUNTS_LOGIN_T'), 'required|trim|alpha_dash|min_length[4]|max_length[32]|callback_isUniqueLogin');		$this->ciObject->form_validation->set_rules('email', lang('ACCOUNTS_EMAIL_T'), 'required|trim|valid_email|callback_isUniqueEmail');		$this->ciObject->form_validation->set_rules('password', lang('ACCOUNTS_PASSWORD_T'), 'required|trim|matches[confirm_password]|min_length[4]');		$this->ciObject->form_validation->set_rules('confirm_password', lang('ACCOUNTS_CONFIRMP_T'), 'required|trim');		$this->ciObject->form_validation->set_rules('captcha', lang('ACCOUNTS_CAPTCHA_T'), 'required|trim|callback_checkCaptcha');		if ($this->ciObject->form_validation->run() == FALSE){			$data['captcha'] = $this->getCaptcha();			return $this->ciObject->load->view('modules/accounts_module/register_form.php', $data, True);		}		$insArr = array('login'=>$this->ciObject->input->post('login'), 						'display_name'=>$this->ciObject->input->post('login'),						'activate_status'=>'1',						'email'=>$this->ciObject->input->post('email'),						'password'=>$this->ciObject->input->post('password'));		$this->ciObject->accounts_model->addUser($insArr);		return $this->ciObject->load->view('modules/accounts_module/register_complete.php', $data, True);	}	public function restorePass(){		$data = array();		$this->ciObject->form_validation->set_rules('email', lang('ACCOUNTS_EMAIL_T'), 'required|trim|valid_email|callback_isEmailExist');		$this->ciObject->form_validation->set_rules('captcha', lang('ACCOUNTS_CAPTCHA_T'), 'required|trim|callback_checkCaptcha');		if ($this->ciObject->form_validation->run() == FALSE){			$data['captcha'] = $this->getCaptcha();			return $this->ciObject->load->view('modules/accounts_module/restorepass_form.php', $data, True);		}		$this->sendPassword($this->ciObject->input->post('email'));				return $this->ciObject->load->view('modules/accounts_module/restorepass_complete.php', $data, True);	}		public function changePass(){		if(!$this->isLogged()) redirect('accounts');		$data = array();		$this->ciObject->form_validation->set_rules('password', lang('ACCOUNTS_PASSWORD_T'), 'required|trim|matches[confirm_password]|min_length[4]');		$this->ciObject->form_validation->set_rules('confirm_password', lang('ACCOUNTS_CONFIRMP_T'), 'required|trim');		$this->ciObject->form_validation->set_rules('captcha', lang('ACCOUNTS_CAPTCHA_T'), 'required|trim|callback_checkCaptcha');		if ($this->ciObject->form_validation->run() == FALSE){			$data['captcha'] = $this->getCaptcha();			return $this->ciObject->load->view('modules/accounts_module/changepass_form.php', $data, True);		}		$currUser = $this->isLogged();		$this->ciObject->accounts_model->changePass($this->ciObject->input->post('password'), $currUser['_USER_RID_']);		return $this->ciObject->load->view('modules/accounts_module/chpass_complete.php', $data, True);	}	
	public function getCaptcha(){		$this->ciObject->load->library('captcha_module');		$this->ciObject->captcha_module->draw('images/captcha', 4, 4);		$currentSESS = $this->ciObject->session->userdata('_SI_');		$currentSESS['CAPTCHA_KEY'] = $this->ciObject->captcha_module->keystring;		$this->ciObject->session->set_userdata('_SI_', $currentSESS);		return base_url().'images/captcha/'.$this->ciObject->captcha_module->fname;	}
	public function checkCaptcha($captcha){		$currentSESS = $this->ciObject->session->userdata('_SI_');		if(element('CAPTCHA_KEY', $currentSESS)!==$captcha){			$this->ciObject->form_validation->set_message('checkCaptcha', 'Неверный код.');			return False;		}		return True;	}
	public function isUniqueLogin($login){		if(!$this->ciObject->accounts_model->isUniqueLogin($login)){			$this->ciObject->form_validation->set_message('isUniqueLogin', 'Пользователь с таким логином уже существует. Выберите, пожалуйста другой логин.');			return False;		}		return True;	}
	public function isUniqueEmail($email){		if(!$this->ciObject->accounts_model->isUniqueEmail($email)){			$this->ciObject->form_validation->set_message('isUniqueEmail', 'Пользователь с таким Email уже существует.');			return False;		}		return True;	}	public function isEmailExist($email){		if($this->ciObject->accounts_model->isUniqueEmail($email)){			$this->ciObject->form_validation->set_message('isEmailExist', 'Пользователя с таким Email не существует.');			return False;		}		return True;	}		public function RenderLoginArea(){		$currentSESS = $this->ciObject->session->userdata('_SI_');		if(isset($currentSESS['SI_LOGIN']))	{			$this->objectsArr['accounts_login_success_note'] = sprintf($this->ciObject->lang->line('ACCOUNTS_LOGIN_SUCCESS_NOTE'), 																		$currentSESS['SI_LOGIN']['_USER_LOGIN_']); 			return $this->ciObject->load->view('modules/accounts_module/loginareain.php',$this->objectsArr, True);		}		return $this->ciObject->load->view('modules/accounts_module/loginarea.php',$this->objectsArr, True);	}		public function sendPassword($email){		$user = $this->ciObject->accounts_model->getUserByEmail($email);		$this->ciObject->load->library('email');		$this->ciObject->email->from('support@saleinform.com', 'Saleinform.com');		$this->ciObject->email->to($user->email);		$this->ciObject->email->subject(lang('ACCOUNTS_MODULE_RESTORE_PASSWORD_TITLE'));		$this->ciObject->email->message(sprintf(lang('ACCOUNTS_MODULE_RESTORE_PASSWORD_EMAIL'), $user->login, $user->login, $user->password));		$this->ciObject->email->send();	}
}
?>