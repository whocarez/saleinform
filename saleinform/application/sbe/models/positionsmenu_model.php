<?phpinclude_once APPPATH."libraries/core/Crmmodel.php";class Positionsmenu_model extends Crmmodel {	public function __construct(){		parent::__construct();	}
	public function get_ds(){		$this->db->select('SQL_CALC_FOUND_ROWS _positions_menus.rid as rid, _positions_menus._positions_rid as _positions_rid, 							_positions_menus._menu_items_rid as _menu_items_rid, _positions_menus.parent,							_positions_menus.item_rights as item_rights,							_positions_menus.item_area as item_area,							_positions_menus.item_order as item_order,							_positions_menus.hidden as hidden,							_positions.name as position_name,							_positions_menus.constant_search_rule as constant_search_rule,							_positions_menus.default_sort_rule as default_sort_rule,							_menu_items.item_name as menu_name,							DATE_FORMAT(_positions_menus.modifyDT, \'%d.%m.%Y\') as modifyDT, 							_positions_menus.descr as descr, _positions_menus.archive as archive', False);		$this->db->from('_positions_menus');		$this->db->join('_positions', '_positions_menus._positions_rid = _positions.rid');		$this->db->join('_menu_items', '_positions_menus._menu_items_rid = _menu_items.rid');		if($searchRule = $this->ci->get_session('searchrule')) $this->db->like($searchRule);		if($sort = $this->ci->get_session('sort'))	$this->db->orderby($sort['c'], $sort['r']);		$this->db->limit($this->ci->config->item('crm_grid_limit'), element('p', $this->ci->a_uri_assoc, null));		$query = $this->db_get('_cities');		return $query->num_rows()?$query->result():array();	}
	public function get_edit($rid){		$this->db->select('_positions_menus.rid as rid, _positions_menus._positions_rid as _positions_rid, 							_positions_menus._menu_items_rid as _menu_items_rid, _positions_menus.parent,							_positions_menus.item_rights as item_rights,							_positions_menus.item_area as item_area,							_positions_menus.item_order as item_order,							_positions_menus.hidden as hidden,							_positions_menus.constant_search_rule as constant_search_rule,							_positions_menus.default_sort_rule as default_sort_rule,							_positions_menus.modifyDT as modifyDT, 							_positions_menus.owner_users_rid,							_positions_menus.descr as descr, _positions_menus.archive as archive');		$this->db->from('_positions_menus');		$this->db->where(array('_positions_menus.rid'=>$rid));		$query = $this->db_get('_positions_menus');		return $query->num_rows()?$query->row():False;	}
	public function create_record(){		$ins_arr = array('_positions_rid'=>$this->ci->input->post('_positions_rid'),							'_menu_items_rid'=>$this->ci->input->post('_menu_items_rid'),							'parent'=>$this->ci->input->post('parent'),							'item_rights'=>implode('|', $this->ci->input->post('item_rights')),							'item_area'=>$this->ci->input->post('item_area'),							'item_order'=>$this->ci->input->post('item_order'),							'hidden'=>$this->ci->input->post('hidden'),							'constant_search_rule'=>$this->ci->input->post('constant_search_rule'),							'default_sort_rule'=>$this->ci->input->post('default_sort_rule'),							'descr'=>$this->ci->input->post('descr'),							'archive'=>$this->ci->input->post('archive'),							'owner_users_rid'=>get_curr_urid(),							'modifier_users_rid'=>get_curr_urid());		$this->db->set('createDT', 'now()', False);		$this->db->set('modifyDT', 'now()', False);		$this->db->trans_begin();		$this->db->insert('_positions_menus', $ins_arr);		$insRid = $this->db->insert_id();		if ($this->db->trans_status() === FALSE){    		$this->db->trans_rollback();    		return False;		}else{    		$this->db->trans_commit();    		return $insRid;		}			}	
	public function update_record(){		$update_arr = array('_positions_rid'=>$this->ci->input->post('_positions_rid'),							'_menu_items_rid'=>$this->ci->input->post('_menu_items_rid'),							'parent'=>$this->ci->input->post('parent'),							'item_rights'=>implode('|', $this->ci->input->post('item_rights')),							'item_area'=>$this->ci->input->post('item_area'),							'item_order'=>$this->ci->input->post('item_order'),							'hidden'=>$this->ci->input->post('hidden'),							'constant_search_rule'=>$this->ci->input->post('constant_search_rule'),							'default_sort_rule'=>$this->ci->input->post('default_sort_rule'),							'descr'=>$this->ci->input->post('descr'),							'archive'=>$this->ci->input->post('archive'),							'modifier_users_rid'=>get_curr_urid());		$this->db->set('modifyDT', 'now()', False);		echo implode('|', $this->ci->input->post('item_rights'));		$this->db->trans_begin();		$this->db->update('_positions_menus', $update_arr, array('rid'=>$this->ci->input->post('rid')));		if ($this->db->trans_status() === FALSE){    		$this->db->trans_rollback();    		return False;		}else{    		$this->db->trans_commit();    		return True;		}			}
	public function remove_items(){		$this->db->trans_begin();		foreach($this->ci->input->post('row') as $rid){			$this->db->delete('_positions_menus', array('rid'=>$rid));			}		if ($this->db->trans_status() === FALSE){    		$this->db->trans_rollback();    		return False;		}else{    		$this->db->trans_commit();    		return True;		}			}		public function get_list($prid){		$this->db->select('_positions_menus.*, _menu_items.item_name');		$this->db->from('_positions_menus');		$this->db->join('_menu_items', '_positions_menus._menu_items_rid = _menu_items.rid');		$this->db->where(array('_positions_menus._positions_rid'=>$prid));		$this->db->order_by('_positions_menus.item_order, _menu_items.item_name');		$query = $this->db->get();		return $query->num_rows()?$query->result_array():array(); 	}				public function move_record(){		$update_doc = array('owner_users_rid'=>get_urid_byemprid($this->ci->input->post('_employeers_rid')));		$this->db->set('modifyDT', 'now()', False);		$this->db->trans_begin();		$this->db->update('_positions_menus', $update_doc, array('_positions_menus.rid'=>$this->ci->input->post('rid')));		if ($this->db->trans_status() === FALSE){    		$this->db->trans_rollback();    		return False;		}else{    		$this->db->trans_commit();    		return $this->ci->input->post('rid');		}			}	}
?>